buildscript {
    def localRepositoryPath = 'file://' + new File(System.getProperty('user.home'), '/.m2/repository').absolutePath
    repositories {
        maven { url localRepositoryPath }
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.0.RELEASE'
        classpath 'io.franzbecker:gradle-lombok:1.14'
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.franzbecker.gradle-lombok'
    // apply from: "$rootDir/analysis.gradle"
    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    def localRepositoryPath = 'file://' + new File(System.getProperty('user.home'), '/.m2/repository').absolutePath

    group = 'com.csci.cloud.core'
    version = '1.0.0'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    uploadArchives {
        repositories {
            //mavenDeployer 需要依赖 apply plugin: 'maven'
            mavenDeployer   {
                repository(url: localRepositoryPath)
                pom.project {
                    name = project.name        // 当前项目名称
                    version = project.version   //当前项目版本  0.0.1
                    groupId = project.group     //  当前项目组  com.xxx
                }
            }
        }
    }

    repositories {
        maven { url localRepositoryPath }
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:Cairo-SR2'
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.RELEASE'
        }

        dependencies {
            dependency 'org.slf4j:slf4j-api:1.7.25'
            dependency 'com.github.pagehelper:pagehelper:5.1.0'
            dependency 'org.apache.commons:commons-collections4:4.1'
            dependency 'io.github.openfeign:feign-core:9.5.1'
            dependency 'com.squareup.okhttp3:okhttp:3.6.0'
            dependency 'commons-codec:commons-codec:1.10'
            dependency group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '4.11'
            dependency('io.springfox:springfox-swagger2:2.9.2') {
                exclude module: 'swagger-models'
                exclude module: 'swagger-annotation'
            }
            dependency 'io.springfox:springfox-swagger-ui:2.9.2'
            dependency 'io.swagger:swagger-annotations:1.5.21'
            dependency 'io.swagger:swagger-models:1.5.21'
            dependency('io.github.openfeign.form:feign-form:3.3.0')
            dependency('io.github.openfeign.form:feign-form-spring:3.3.0')

            // log
            dependency('net.logstash.logback:logstash-logback-encoder:4.11')

           dependency('com.csci.cloud.auth:client:1.0.0')
        }
    }

    dependencies {
        compile('org.projectlombok:lombok')
        compile('org.apache.commons:commons-lang3')
        compile('com.google.guava:guava')
        testCompile('junit:junit')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
    }
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourceJar {
                    classifier "sources"
                }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    mavenLocal()
                  //  url 'http://maven.aliyun.com/nexus/content/groups/public/'
                } else {
                    mavenLocal()
                  //  url 'http://maven.aliyun.com/nexus/content/groups/public/'
                }

            }
        }
    }
}
